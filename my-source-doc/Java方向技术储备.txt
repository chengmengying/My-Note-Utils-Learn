Java开发人员 知识储备/技能储备 道路

入门阶段：
Java	面向对象，继承，抽象接口，常用的JDK自带对象（包装类，final，static，String，时间日期，文件，输入输出等）
JavaEE 	Servlet，JavaBean，JSP，JDBC，EL表达式，用JSTL从请求域获取动态数据。另外web.xml被称为动态web项目的初始化启动文件，希望围绕这个文件展开对JavaEE入门阶段的学习。
数据库	基本建库建表语句，基本约束（自增，非空等），select,delete,update,alter,insert，order by字句，group by字句，having字句，limit分页，左右连接查询，子查询，了解SQL92和SQL99标准。	
前端	能看懂html，css，简单的JavaScript，JSP 以及路径的引入写法。
目标： 建立基础的MVC设计典范思想，掌握一个web项目开发需要整合的资源有哪些。大致入门，能够对数据库进行增删改查。

起航阶段：
Java	1、集合。熟悉Java常用数据容器 list、set、map。主要学习List、hashMap。面试中必问，工作中必用。
	2、违例差错控制。也就是try-catch-finally
	3、运行时类型识别RTTI(Run Time Type Identification) 就是常说的反射
	其实就是希望对JDK有一个重新的认识，JDK远远比想象的要强大很多很多。JDK提供的 IO、序列化、动态代理，JUC，设计范式等等，希望能好好过一遍，对编程思维提升特别大。
数据库	这个阶段不希望了解太多数据库深层次的知识。但两个主流OR框架二选一学一下 Hibernate(JPA) 和 MyBatis （工作之后两个都必学）
前端	能看懂页面，起码得用谷歌检查模式跟踪一下程序吧。
	ajax技术必须掌握，JQuery
	本文的宗旨是Java程序员的知识储备，会太多你就变成前端工程师了，所以这里是第一次你可以重新选择你的职业。走前端的路，去学vue，nodejs，html5
框架	Spring，SpringMVC，必学，面试必问，工作中必用
工具	IDEA开发工具必须熟练 Maven构建工具必须熟练 
其他	Linux和Git不谈，想学编程，不会这两个，可以考虑转行了（这两个是一个人发明的，如果这两个收费，个人觉得世界计算机行业会倒退20年不止，感谢开源！这是计算机产业最大的情怀！）
目标：学习至此，找到一份工作，写一个毕设已经不是难题。这个阶段会有大量的新知识，需要花时间探索，允许适当的囫囵吞枣，不懂可以跳过，宗旨在于接触很多新东西，有了这些知识储备，之后想学什么都会很快速的入门。


远征阶段：
越到后面，才会发现有些东西特别重要。哈希表、红黑树、B数、二叉树、234树、二叉搜索树...
Java	JUC、Java8的lamoda表达式，所以JDK的东西是要一直学的，HashMap的底层原理啊什么的，去看看吧，很有意思的。
	设计模式三杰：单例、观察者、工厂
框架	1、Spring全家桶，你值得拥有。spring springmvc springdata springboot
	2、JPA和MyBatis 一定要学了
	3、安全方面，权限管理，认证框架学习Shiro
数据库	你听说过数据库索引吗? Java开发工程师如何写出高性能的SQL语句，数据库索引如何建立？索引优化怎么操作？MySQL高级操作了解一下？
	悲观锁，乐观锁或许你都知道，行表锁，间隙锁呢？先定个小目标，写个存储过程，经过函数调用，往数据库里面插入一亿条数据试试。MySQL官网，允许500万条的时候不建立索引
	你可能知道NoSQL，所以去学当先最火爆的内存数据库Redis吧，一秒钟读10万条数据，写8万条数据，底层使用C语言写的，可以翻一下他的数据结构是什么样的，Redis对哈希表的实现是怎么样的？
	所以，在这里出现了第二条路： DBA，面对数以亿计的海量关系数据，怎么迅速查到想要的那一条？这才叫数据工程师！
目标：学习至此，不要膨胀，希望能对计算机行业有一个粗浅的认识


探秘阶段：
分布式，集群，大数据，云计算，这几年最火热的词汇
分布式架构：
	1： 阿里巴巴的Dubbo（提供者，消费者）搭配上 Zookeeper（服务注册与发现），负载均衡，构建第一个分布式系统
	2：学了Dubbo怎么可以不学 Docker 把开发环境联系到生产环境，真正的微服务。感受一下Docker这只蔚蓝色的鲸鱼是怎样发起“降维打击”的
	学了Docker,告诉你什么是真正的运维，几百个服务器组成的集群，其中一个宕机了怎么办，怎么样访问加速、数据快速存取、服务快速调用，SQL性能优化，抵御洪峰流量，这些才是真正的运维。
	所以第三个方向：运维工程师，工资极高。高的可怕。
	3：SpringCloud 搭配上 SpringBoot 面对微服务的另外一种落地实现，云计算不再是一个虚无缥缈的词汇。Eureka,Feign,Zuul,Ribbon,Histrix,SpringCloudConfig

	现在我们有了一个概念，单个服务器已经撑不起网站的建设，只能是集群，那么我们多台机器是怎么协作的呢？
	4：Hadoop 大数据入门必学，我们将海量数据存储在HDFS文件系统上，数据就是资源，怎么计算分析这些数据呢？ 第四个方向：大数据工程师数据挖掘，去学spack,kafka,hbase,mapreduce吧
	既然是集群，怎么保证数据一致性和分区容错性呢？思考一下未来，5G时代，数据一致能够快速得到保证  NoSQL数据库的 CAP理论    VS   关系型数据库的ACID理论
	5：递归调用服务，集群扇出怎么办？ 解耦、削峰、异步，当然是用消息中间件了ActiveMQ  RabbitMQ  RockerMQ kafka
	6：这种关键的时候JDK怎么能少，JVM还不动手？

稀缺阶段：
（太远了，接触不到）
考虑方向：
1：是业务滋生了技术，还是技术滋生了业务？
2：什么是一个好的产品？
3：怎么样去防御黑客攻击？
4：有没有可能产生一套面向所有数据库都通用的、开源的操作框架？比如阿里的TDDL
唯一不变的就是变化本身，什么东西都在一直变化着。









