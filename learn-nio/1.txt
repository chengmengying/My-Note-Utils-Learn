12、本地方法接口
什么是本地方法？
一个Native Method 就是一个Java调用非Java代码的接口。
一个Native Method 是一种特殊的Java方法：由非Java语言实现，比如C 很多编程语言都有这样的机制，比如在C++中，可以用extends “C” 告知C++编译器去调用一个C函数。

在定义一个native method的时，并不提供具体的实现，因为具体的实现是由非Java语言在外面实现的。
本地接口的作用是融合不同的编程语言为Java所用，它的初衷是融合C/C++程序。
 “A native method is a Java method whose implementation is provided by non-java code”

Java使用起来非常方便，然而有些城市的任务使用Java实现起来就不容易，或者我们对程序的效率很在意的时候，一些问题也就随之而来。
Java应用需要与Java外面的环境交互，这就是本地方法存在的主要原因。
目前本地方法使用的越来越少，除非是与硬件有关的应用。

12、本地方法栈
Java虚拟机栈用于管理Java方法的调用，而本地方法栈用于管理本地方法的调用。
本地方法栈，也是线程私有的。
运行被实现成固定或者是可动态扩展的内存大小。在内存溢出方面和Java虚拟机栈是相同的。
如果线程请求分配的栈绒里写那个超过了本地方法栈允许的最大容量，则JVM会抛出StackOverFlow异常。
如果本地方法栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新线程的时候没有足够的内存去创建对应的本地方法栈，那么JVM会抛出一个OutOfMemoryError异常。
本地方法是使用C语言实现的。
它的具体做法是Native Method Stack 中等级native方法，在Execution Engine执行的时候加载本地方法库。

当某一个线程调用一个本地方法的时候，他就进入了一个全新的并且不再受虚拟机限制的世界，它和虚拟机拥有同样的权限。
本地方法可以直接通过本地方法接口来访问虚拟机内部的临时数据区域。
它甚至可以直接使用本地处理器中的寄存器。
直接从本地内存的堆中分配任意数量的内存。
并不是所有的JVM都支持本地方法，因为Java虚拟机规范并没有明确要求本地方法栈使用的语言、具体的实现、数据结构等等。如果JVM产品不打算支持native方法，也可以不需要实现本地方法栈。
在HotSpot虚拟机中，直接将本地方法栈和虚拟机栈合二为一。

